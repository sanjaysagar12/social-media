// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  avatar      String?
  googleId    String?  @unique
  walletAddress String? @unique
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Step relationships
  createdSteps Step[] @relation("StepCreator")
  joinedSteps  Step[] @relation("StepParticipants")
  posts         Post[]
  comments      Comment[]
  upvotes       Upvote[]
  stepLikes     StepLike[]

  // Wallet/Transaction relationships removed (handled off-chain or not needed)

  @@map("users")
}

model Step {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  verified    Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Creator relationship
  creatorId   String
  creator     User     @relation("StepCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  // Participants relationship
  participants User[]  @relation("StepParticipants")
  
  // Posts relationship
  posts       Post[]

  // Likes relationship
  userLikes   StepLike[]

  // Transaction relationship removed

  @@map("steps")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Step relationship
  stepId    String?
  step      Step?    @relation(fields: [stepId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Comments relationship
  comments  Comment[]
  
  // Upvotes relationship
  userUpvotes Upvote[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post relationship
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Self-referencing relationships for replies
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Post relationship
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure one user can only upvote a post once
  @@unique([userId, postId])
  @@map("upvotes")
}

model StepLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Step relationship
  stepId    String
  step      Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)

  // Ensure one user can only like a step once
  @@unique([userId, stepId])
  @@map("step_likes")
}



// Transaction model removed - financial records handled off-chain or in a separate service

