// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  avatar      String?
  googleId    String?  @unique
  walletAddress String? @unique
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Event relationships
  createdEvents Event[] @relation("EventCreator")
  joinedEvents  Event[] @relation("EventParticipants")
  wonEvents     Event[] @relation("EventWinner")
  posts         Post[]
  comments      Comment[]
  upvotes       Upvote[]
  eventLikes    EventLike[]

  // Wallet relationships
  wallet        Wallet?
  transactions  Transaction[]

  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  prize       String?
  thumbnail   String?
  verified    Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Creator relationship
  creatorId   String
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  // Winner relationship
  winnerId    String?
  winner      User?    @relation("EventWinner", fields: [winnerId], references: [id])

  // Participants relationship
  participants User[]  @relation("EventParticipants")
  
  // Posts relationship
  posts       Post[]

  // Likes relationship
  userLikes   EventLike[]

  // Transaction relationship
  transactions Transaction[]

  @@map("events")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  image     String?
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Event relationship
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Comments relationship
  comments  Comment[]
  
  // Upvotes relationship
  userUpvotes Upvote[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post relationship
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Self-referencing relationships for replies
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Upvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Post relationship
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure one user can only upvote a post once
  @@unique([userId, postId])
  @@map("upvotes")
}

model EventLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Event relationship
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Ensure one user can only like an event once
  @@unique([userId, eventId])
  @@map("event_likes")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PRIZE_LOCK
  PRIZE_DISTRIBUTION
  EVENT_PARTICIPATION
  REFUND
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

model Wallet {
  id            String   @id @default(cuid())
  balance       String   @default("0") // Store as string to handle large numbers/decimals
  lockedBalance String   @default("0") // Funds locked in smart contracts
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User relationship (one-to-one)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Transaction relationships
  sentTransactions     Transaction[] @relation("SenderWallet")
  receivedTransactions Transaction[] @relation("ReceiverWallet")

  @@map("wallets")
}

model Transaction {
  id              String            @id @default(cuid())
  amount          String            // Store as string for precision
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  txHash          String?           // Blockchain transaction hash
  blockNumber     Int?              // Block number for confirmed transactions
  gasUsed         String?           // Gas used in blockchain transaction
  gasFee          String?           // Gas fee paid
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  confirmedAt     DateTime?         // When transaction was confirmed

  // User relationship (who initiated the transaction)
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Sender wallet relationship
  senderWalletId  String?
  senderWallet    Wallet?           @relation("SenderWallet", fields: [senderWalletId], references: [id])

  // Receiver wallet relationship
  receiverWalletId String?
  receiverWallet   Wallet?          @relation("ReceiverWallet", fields: [receiverWalletId], references: [id])

  // External wallet addresses (for blockchain transactions)
  fromAddress     String?           // External sender address
  toAddress       String?           // External receiver address

  // Event relationship (if transaction is related to an event)
  eventId         String?
  event           Event?            @relation(fields: [eventId], references: [id])

  @@map("transactions")
}
